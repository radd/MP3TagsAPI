/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package io.github.radd;

import com.sun.jndi.toolkit.url.Uri;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.List;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.DefaultListModel;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JCheckBox;
import javax.swing.JList;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

/**
 *
 * @author Piotr
 */
public class YoutubePanel extends javax.swing.JPanel {

    private File file;
    private FilePanel filePanel;
    private DefaultListModel model;
    ArrayList<String> list = new ArrayList<String>();
    ArrayList<String> ids = new ArrayList<String>();
    private BufferedImage imageToCover;
    private BufferedImage imageToEdit;
   
    
     /**
     * Creates new form youtubePanel
     */
    public YoutubePanel() {
        initComponents();
        
        searchQuery.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createLineBorder(Color.GRAY, 1), BorderFactory.createEmptyBorder(3, 5, 3, 5)));
        
    }
    
    public YoutubePanel(FilePanel filePanel) {
        this();
        this.filePanel = filePanel;     
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        coverPositionButtonGroup = new javax.swing.ButtonGroup();
        searchQueryText = new javax.swing.JTextField();
        searchQuery = new javax.swing.JTextField();
        searchBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultList = new javax.swing.JList<>();
        jPanel1 = new javax.swing.JPanel();
        coverIcon = new javax.swing.JLabel();
        squareCheckBox = new javax.swing.JCheckBox();
        stripesCheckBox = new javax.swing.JCheckBox();
        cropCoverBtn = new javax.swing.JButton();
        addToEditBtn = new javax.swing.JButton();
        centerRadioButton = new javax.swing.JRadioButton();
        leftRadioButton = new javax.swing.JRadioButton();
        rightRadioButton = new javax.swing.JRadioButton();

        setBackground(new java.awt.Color(255, 255, 255));

        searchQueryText.setEditable(false);
        searchQueryText.setText("Search query:");
        searchQueryText.setBorder(null);
        searchQueryText.setOpaque(false);

        searchQuery.setBorder(null);

        searchBtn.setText("Search");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        model = new DefaultListModel();
        resultList.setModel(model);
        resultList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        resultList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                resultListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(resultList);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)), "Cover"));

        squareCheckBox.setSelected(true);
        squareCheckBox.setText("Square");
        squareCheckBox.setOpaque(false);
        squareCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                squareCheckBoxItemStateChanged(evt);
            }
        });

        stripesCheckBox.setText("Remove black stripes");
        stripesCheckBox.setOpaque(false);

        cropCoverBtn.setText("Apply");
        cropCoverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cropCoverBtnActionPerformed(evt);
            }
        });

        addToEditBtn.setText("Add to edit");
        addToEditBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToEditBtnActionPerformed(evt);
            }
        });

        coverPositionButtonGroup.add(centerRadioButton);
        centerRadioButton.setSelected(true);
        centerRadioButton.setText("center");
        centerRadioButton.setOpaque(false);

        coverPositionButtonGroup.add(leftRadioButton);
        leftRadioButton.setText("left");
        leftRadioButton.setOpaque(false);

        coverPositionButtonGroup.add(rightRadioButton);
        rightRadioButton.setText("right");
        rightRadioButton.setOpaque(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(coverIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(addToEditBtn)))
                .addGap(37, 37, 37)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cropCoverBtn)
                    .addComponent(stripesCheckBox)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(leftRadioButton)
                            .addComponent(squareCheckBox))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(centerRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rightRadioButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(squareCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(centerRadioButton)
                            .addComponent(leftRadioButton)
                            .addComponent(rightRadioButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(stripesCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cropCoverBtn)
                        .addGap(1, 1, 1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(coverIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(addToEditBtn)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(searchQueryText, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(searchQuery)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(searchBtn))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 338, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchQueryText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchQuery, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cropCoverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cropCoverBtnActionPerformed
        editCover();
    }//GEN-LAST:event_cropCoverBtnActionPerformed

    private void resultListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_resultListValueChanged
        if (!evt.getValueIsAdjusting()) { 
            JList fileList = (JList)evt.getSource();
            System.out.println(" " + fileList.getSelectedIndex());
            if(fileList.getSelectedIndex() >= 0)
            {
                try {
                    //coverIcon.setIcon(icon);
                    String path = "https://i.ytimg.com/vi/" + ids.get(fileList.getSelectedIndex()) + "/sddefault.jpg";
                    System.out.println("Get Image from " + path);
                    URL url = new URL(path);
                    BufferedImage image = ImageIO.read(url);
                    imageToCover = image;
                    imageToEdit = image.getSubimage(0, 0, image.getWidth(), image.getHeight());
                    System.out.println("Load image into frame...");
                    editCover();
                    coverIcon.setVisible(true);
                    
                } catch (MalformedURLException ex) {
                    Logger.getLogger(YoutubePanel.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(YoutubePanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_resultListValueChanged

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        search(searchQuery.getText());
    }//GEN-LAST:event_searchBtnActionPerformed

    private void addToEditBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToEditBtnActionPerformed
        filePanel.setCoverFromApi(imageToCover);
    }//GEN-LAST:event_addToEditBtnActionPerformed

    private void squareCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_squareCheckBoxItemStateChanged
        JCheckBox box = (JCheckBox) evt.getSource();
        if(box.isSelected()) {
            centerRadioButton.setEnabled(true);
            leftRadioButton.setEnabled(true);
            rightRadioButton.setEnabled(true);
        }        
        else {
            centerRadioButton.setEnabled(false);
            leftRadioButton.setEnabled(false);
            rightRadioButton.setEnabled(false);
        }
    }//GEN-LAST:event_squareCheckBoxItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addToEditBtn;
    private javax.swing.JRadioButton centerRadioButton;
    private javax.swing.JLabel coverIcon;
    private javax.swing.ButtonGroup coverPositionButtonGroup;
    private javax.swing.JButton cropCoverBtn;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton leftRadioButton;
    private javax.swing.JList<String> resultList;
    private javax.swing.JRadioButton rightRadioButton;
    private javax.swing.JButton searchBtn;
    private javax.swing.JTextField searchQuery;
    private javax.swing.JTextField searchQueryText;
    private javax.swing.JCheckBox squareCheckBox;
    private javax.swing.JCheckBox stripesCheckBox;
    // End of variables declaration//GEN-END:variables

    public void setFile(File f) {
        file = f;
    }
    
    private final String API_URL = "https://www.googleapis.com/youtube/v3/search?maxResults=5&part=snippet";
    
    
    public void search () {
        search(filePanel.getFilename());
    }
    
    public void search(String query) {
        
        model.removeAllElements();
        ids.clear();
        list.clear();
        coverIcon.setVisible(false);
        
        
        Properties properties = new Properties();
        try {
            InputStream in = this.getClass().getResourceAsStream("" + MP3Tags.PROPERTIES_FILENAME);
            properties.load(in);

        } catch (IOException e) {
            System.err.println("There was an error reading " + MP3Tags.PROPERTIES_FILENAME + ": " + e.getCause()
                    + " : " + e.getMessage());
            System.exit(1);
        }
        
        String apiKey = properties.getProperty("youtube.apikey");
        
        StringBuilder sb = null;
        
        try {
            String urlSearch = API_URL + "&key=" + apiKey + "&q=" + URLEncoder.encode(query, "UTF-8");
            System.out.println(urlSearch);
            URL url = new URL(urlSearch);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setDoOutput(true);
            connection.setInstanceFollowRedirects(false);
            connection.setRequestMethod("GET");
            connection.setRequestProperty("Content-Type", "application/json");
            connection.setRequestProperty("charset", "utf-8");
            connection.connect();

            BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            String inputLine;
            sb = new StringBuilder();

            while ((inputLine = in.readLine()) != null) {
                sb.append(inputLine);
            }
            in.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        
      
        
        
        if (sb != null) {
            JSONObject json = null;
            try {
                json = new JSONObject(sb.toString());
            } catch (JSONException ex) {
                Logger.getLogger(YoutubePanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            if(json != null) {
                System.out.println(json);
                try {
                    JSONArray arr = json.getJSONArray("items");
                    
                    for(int i = 0; i < arr.length(); i++)
                    {
                        JSONObject objarr = arr.getJSONObject(i);
                        
                        
                        JSONObject objid = objarr.getJSONObject("id");
                        String kind = objid.getString("kind");
                        if(kind.equals("youtube#video")) {
                            
                            JSONObject objsni = objarr.getJSONObject("snippet");
                            String title = objsni.getString("title");
                            list.add(title);
                            System.out.println(title);
                            
                            String id = objid.getString("videoId");
                            ids.add(id);
                            System.out.println(id);
                        }
                        
                    
                    }
                    
                
                
                } catch (JSONException ex) {
                    Logger.getLogger(YoutubePanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            
        }
        
        model.removeAllElements();
        for(String s : list) {
            model.addElement(s);
        }
        
        searchQuery.setText(query);
        
        
        if(list.size() > 0)
            resultList.setSelectedIndex(0);
        
        System.out.println(list);
        System.out.println(ids);
        
        
        
  
    }

    private void showCover() {
        Image newImage;
        newImage = imageToCover.getScaledInstance(100, 100, Image.SCALE_SMOOTH);
        
        coverIcon.setIcon(new ImageIcon(newImage));     
    }
    
    private void editCover() {
        Rectangle rect = new Rectangle();
        int h = imageToEdit.getHeight();
        int w = imageToEdit.getWidth();
        int offset = (stripesCheckBox.isSelected() ? 60 : 0);
        
        if(squareCheckBox.isSelected()) {
            rect.width = h - 2 * offset;
            rect.height = rect.width; 
            rect.y = offset;
            
            if(centerRadioButton.isSelected())
                rect.x = w / 2 - ((rect.width) / 2);
            else if(rightRadioButton.isSelected())
                rect.x = w - rect.width;

        } 
        else {
           rect.width = w;
           rect.height = h - 2 * offset;
           rect.y = offset;
        }

        imageToCover = imageToEdit.getSubimage(rect.x, rect.y, rect.width, rect.height);
        showCover();
    }
    
    

}
